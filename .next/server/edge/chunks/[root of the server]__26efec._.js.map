{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 30, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/src/middleware.js"],"sourcesContent":["// middleware.js\r\n// import { NextResponse } from \"next/server\";\r\n// import jwt from \"jsonwebtoken\";\r\n\r\n// // Define protected and public routes\r\n// const protectedRoutes = [\"/dashboard\"];\r\n// const publicPaths = [\"/login\", \"/register\"];\r\n\r\n// export function middleware(request) {\r\n//   const { cookies } = request;\r\n//   const token = cookies.token;\r\n// console.log(request)\r\n//   const url = request.nextUrl.clone();\r\n\r\n//   // Protecting Routes\r\n//   if (\r\n//     protectedRoutes.some((route) => request.nextUrl.pathname.startsWith(route))\r\n//   ) {\r\n//     if (!token) {\r\n//       url.pathname = \"/login\";\r\n//       return NextResponse.redirect(url);\r\n//     }\r\n\r\n//     try {\r\n//       jwt.verify(token, process.env.JWT_SECRET);\r\n//       return NextResponse.next();\r\n//     } catch (error) {\r\n//       url.pathname = \"/login\";\r\n//       return NextResponse.redirect(url);\r\n//     }\r\n//   }\r\n\r\n//   // Prevent authenticated users from accessing login/register\r\n//   if (publicPaths.some((path) => request.nextUrl.pathname === path)) {\r\n//     if (token) {\r\n//       try {\r\n//         jwt.verify(token, process.env.JWT_SECRET);\r\n//         url.pathname = \"/dashboard\";\r\n//         return NextResponse.redirect(url);\r\n//       } catch (error) {\r\n//         // Invalid token, proceed to public page\r\n//       }\r\n//     }\r\n//   }\r\n\r\n//   // Allow all other requests\r\n//   return NextResponse.next();\r\n// }\r\n\r\n// export const config = {\r\n//   matcher: [\"/dashboard\", \"/login\", \"/register\", \"/protected/:path*\"],\r\n// };\r\n"],"names":[],"mappings":"AAAA,gBAAgB;AAChB,8CAA8C;AAC9C,kCAAkC;AAElC,wCAAwC;AACxC,0CAA0C;AAC1C,+CAA+C;AAE/C,wCAAwC;AACxC,iCAAiC;AACjC,iCAAiC;AACjC,uBAAuB;AACvB,yCAAyC;AAEzC,yBAAyB;AACzB,SAAS;AACT,kFAAkF;AAClF,QAAQ;AACR,oBAAoB;AACpB,iCAAiC;AACjC,2CAA2C;AAC3C,QAAQ;AAER,YAAY;AACZ,mDAAmD;AACnD,oCAAoC;AACpC,wBAAwB;AACxB,iCAAiC;AACjC,2CAA2C;AAC3C,QAAQ;AACR,MAAM;AAEN,iEAAiE;AACjE,yEAAyE;AACzE,mBAAmB;AACnB,cAAc;AACd,qDAAqD;AACrD,uCAAuC;AACvC,6CAA6C;AAC7C,0BAA0B;AAC1B,mDAAmD;AACnD,UAAU;AACV,QAAQ;AACR,MAAM;AAEN,gCAAgC;AAChC,gCAAgC;AAChC,IAAI;AAEJ,0BAA0B;AAC1B,yEAAyE;AACzE,KAAK"}},
    {"offset": {"line": 75, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}